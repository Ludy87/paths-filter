name: "Pull Request Verification"
on:
  pull_request:
    paths-ignore: [ '*.md' ]
    branches:
      - master
      - '**'

# cancel in-progress jobs if a new job is triggered
# This is useful to avoid running multiple builds for the same branch if a new commit is pushed
# or a pull request is updated.
# It helps to save resources and time by ensuring that only the latest commit is built and tested
# This is particularly useful for long-running jobs that may take a while to complete.
# The `group` is set to a combination of the workflow name, event name, and branch name.
# This ensures that jobs are grouped by the workflow and branch, allowing for cancellation of
# in-progress jobs when a new commit is pushed to the same branch or a new pull request is opened.
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.pull_request.number || github.ref_name || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: 24
        cache: 'npm'
    - run: |
        npm install
        npm run all

  test-inline:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - uses: ./
      id: filter
      with:
        filters: |
          error:
            - not_existing_path/**/*
          any:
            - "**/*"
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1
    - name: changes-test
      if: contains(fromJSON(steps.filter.outputs.changes), 'error') || !contains(fromJSON(steps.filter.outputs.changes), 'any')
      run: exit 1

  test-external:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - uses: ./
      id: filter
      with:
        filters: '.github/filters.yml'
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1

  test-without-token:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - uses: ./
      id: filter
      with:
        token: ''
        filters: '.github/filters.yml'
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1

  test-wd-without-token:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        path: somewhere
    - uses: ./somewhere
      id: filter
      with:
        token: ''
        working-directory: somewhere
        filters: '.github/filters.yml'
    - name: filter-test
      if: steps.filter.outputs.any != 'true' || steps.filter.outputs.error == 'true'
      run: exit 1

  test-local-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - run: echo "NEW FILE" > local
    - run: git add local
    - uses: ./
      id: filter
      with:
        base: HEAD
        filters: |
          local:
            - local
    - name: filter-test
      if: steps.filter.outputs.local != 'true'
      run: exit 1
    - name: count-test
      if: steps.filter.outputs.local_count != 1
      run: exit 1

  test-change-type:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - name: configure GIT user
      run: git config user.email "john@nowhere.local" && git config user.name "John Doe"
    - name: modify working tree
      run: touch add.txt && rm README.md && echo "TEST" > LICENSE
    - name: commit changes
      run: git add -A && git commit -a -m 'testing this action'
    - uses: ./
      id: filter
      with:
        token: ''
        list-files: shell
        filters: |
          added:
            - added: "add.txt"
          deleted:
            - deleted: "README.md"
          modified:
            - modified: "LICENSE"
          any:
            - added|deleted|modified: "*"
    - name: Print 'added_files'
      run: echo ${{steps.filter.outputs.added_files}}
    - name: Print 'modified_files'
      run: echo ${{steps.filter.outputs.modified_files}}
    - name: Print 'deleted_files'
      run: echo ${{steps.filter.outputs.deleted_files}}
    - name: filter-test
      if: |
        steps.filter.outputs.added != 'true'
        || steps.filter.outputs.deleted != 'true'
        || steps.filter.outputs.modified != 'true'
        || steps.filter.outputs.any != 'true'
        || steps.filter.outputs.added_files != 'add.txt'
        || steps.filter.outputs.modified_files != 'LICENSE'
        || steps.filter.outputs.deleted_files != 'README.md'
      run: exit 1

  test-list-files-json:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - run: |
        echo "ONE" > one.txt
        echo "TWO" > two.txt
        git add one.txt two.txt
    - uses: ./
      id: filter
      with:
        base: HEAD
        list-files: json
        filters: |
          files:
            - added|modified: '*.txt'
    - name: filter-test
      if: steps.filter.outputs.files != 'true'
      run: exit 1
    - name: count-test
      if: steps.filter.outputs.files_count != 2
      run: exit 1
    - name: json-test
      env:
        FILES: ${{ steps.filter.outputs.files_files }}
      run: |
        echo "$FILES" | jq -e 'sort == ["one.txt","two.txt"]'
